#include <iostream>
#include <string>
using namespace std;

struct Review {
    float  rating;
    string comments;
    Review* next;
};

void addNodeToHead(Review*& head, float rating, const string& comments);
void addNodeToTail(Review*& head, float rating, const string& comments);
void outputReviews(Review* head);
float calculateAverageRating(Review* head) ;

int main() {
    Review* head = nullptr;
    int choice;
    char another ;

    cout << "Which linked list method should we use?\n";
    cout << "    [1] New nodes are added at the head of the linked list\n";
    cout << "    [2] New nodes are added at the tali of the linked list\n";
    cout << "Choice: ";
    cin >> choice;
    cin.ignore();

    do {
        float rating;
        string comments;

        cout << "Enter review rating 0-5: ";
        cin >> rating;
        cin.ignore();
        cout << "Enter review comments: ";
        getline(cin, comments);

        if (choice == 1) {
            addNodeToHead(head, rating, comments);
        } else {
            addNodeToTail(head, rating, comments);
        }

        cout << "Enter another review? Y/N:  ";
        cin >> another;
        cin.ignore();
    } while (tolower(another) =='y');

    cout << "Outputting all reviews :\n";
    outputReviews(head);
    cout << "Average: " << calculateAverageRating(head) << endl;

    return 0;
}

void addNodeToHead(Review*& head, float rating, const string& comments) {
    Review* newReview = new Review;
    newReview->rating = rating;
    newReview->comments = comments;
    newReview->next = head;
    head = newReview;
}

void addNodeToTail(Review*& head, float rating, const string& comments) {
    Review* newReview = new Review;
    newReview->rating = rating;
    newReview->comments = comments;
    newReview->next = nullptr;

    if (!head) {
        head = newReview;
    } else {
        Review* current =head;
        while (current->next) {
            current = current->next;
        }
        current->next = newReview;
    }
}

void outputReviews(Review*head) {
    int count = 1;
    Review* current = head;
    while (current) {
        cout << "    > Review #" << count++   << ": " << current->rating << ": " << current->comments << endl;
        current  = current->next;
    }
}

float calculateAverageRating(Review* head) {
    float totalRating = 0;
    int count = 0;
    Review* current = head;

    while (current) {
        totalRating += current -> rating;
        count++;
        current = current -> next;
    }

    if (count == 0) return 0;
    return totalRating / count;
}
